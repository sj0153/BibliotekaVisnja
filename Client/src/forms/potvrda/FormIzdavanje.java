/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms.potvrda;

import controller.ClientController;
import domain.Clan;
import domain.Knjiga;
import domain.Potvrda;
import domain.util.RandomID;
import domain.StavkaPotvrde;
import form.tablemodel.TableModelStavke;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author Stefan
 */
public class FormIzdavanje extends javax.swing.JDialog {

    /**
     * Creates new form FrmIzd
     */
    private List<StavkaPotvrde> stavke = new ArrayList<>();
    private List<Knjiga> dostupneKnjige = new ArrayList<>();
    private List<Knjiga> dostupneKnjige2 = new ArrayList<>();
    private SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

    public FormIzdavanje(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();
            setLocationRelativeTo(null);
            dostupneKnjige2 = ClientController.getInstance().vratiDostupneKnjige();
            pripremiFormu();
            JOptionPane.showMessageDialog(this, "Sistem je kreirao potvrdu o izdavanju.", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Sistem ne može da kreira potvrdu o izdavanju.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDatumIzdavanja = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        txtDatumIzdavanja = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtRokZaVracanje = new javax.swing.JTextField();
        lblZaposleni = new javax.swing.JLabel();
        txtIDP = new javax.swing.JFormattedTextField();
        txtZaposleni = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        btnObrisiStavku = new javax.swing.JButton();
        btnDodajStavku = new javax.swing.JButton();
        lblClan = new javax.swing.JLabel();
        btnIDP = new javax.swing.JButton();
        cbClanovi = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Forma za izdavanje knjiga");
        setResizable(false);

        lblDatumIzdavanja.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDatumIzdavanja.setText("Datum izdavanja:");

        btnSacuvaj.setText("SAČUVAJ");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        txtDatumIzdavanja.setEditable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Rok za vraćanje:");

        txtRokZaVracanje.setEditable(false);

        lblZaposleni.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblZaposleni.setText("Zaposleni:");

        txtIDP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#########0"))));

        txtZaposleni.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204)));

        tblStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStavke);

        btnObrisiStavku.setText("OBRIŠI STAVKU");
        btnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStavkuActionPerformed(evt);
            }
        });

        btnDodajStavku.setText("DODAJ STAVKU");
        btnDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajStavkuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDodajStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisiStavku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajStavku)
                    .addComponent(btnObrisiStavku))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblClan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClan.setText("Član:");

        btnIDP.setText("IDP");
        btnIDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIDPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblClan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblZaposleni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDatumIzdavanja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIDP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatumIzdavanja)
                            .addComponent(txtRokZaVracanje)
                            .addComponent(txtZaposleni)
                            .addComponent(cbClanovi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIDP))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIDP)
                    .addComponent(txtIDP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZaposleni)
                    .addComponent(txtZaposleni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClan)
                    .addComponent(cbClanovi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatumIzdavanja)
                    .addComponent(txtDatumIzdavanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRokZaVracanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSacuvaj)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIDPActionPerformed
        txtIDP.setText(RandomID.generisiID());
    }//GEN-LAST:event_btnIDPActionPerformed

    private void btnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStavkuActionPerformed
        int selectedRow = tblStavke.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Niste selektovali stavku!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            TableModelStavke tm = (TableModelStavke) tblStavke.getModel();
            tm.removeStavka(selectedRow);
            stavke = tm.getAllStavke();
            setRokZaVracanje();
            popuniComboBoxKnjige();
        }
    }//GEN-LAST:event_btnObrisiStavkuActionPerformed

    private void btnDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajStavkuActionPerformed
        if (stavke.size() == 3) {
            JOptionPane.showMessageDialog(this, "Potvrda o izdavanju može sadržati najviše tri stavke.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        StavkaPotvrde stavka = new StavkaPotvrde();
        TableModelStavke tm = (TableModelStavke) tblStavke.getModel();
        tm.addStavka(stavka);
        stavke = tm.getAllStavke();
        setRokZaVracanje();
        popuniComboBoxKnjige();
    }//GEN-LAST:event_btnDodajStavkuActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            validacija();
            Potvrda potvrda = new Potvrda();
            potvrda.setIDP(txtIDP.getText().trim());
            potvrda.setZaposleni(ClientController.getInstance().getTrenutniKorisnik());
            potvrda.setClan((Clan) cbClanovi.getSelectedItem());
            potvrda.setDatumIzdavanja(format.parse(txtDatumIzdavanja.getText()));
            potvrda.setRokZaVracanje(format.parse(txtRokZaVracanje.getText()));
            potvrda.setDatumVracanja(null);
            int i = 1;
            for (StavkaPotvrde stavkaPotvrde : stavke) {
                stavkaPotvrde.setRBStavke(i);
                i++;
                stavkaPotvrde.setPotvrda(potvrda);
            }
            potvrda.setStavke(stavke);
            ClientController.getInstance().kreirajPotvrdu(potvrda);
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio potvrdu o izdavanju.", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti potvrdu o izdavanju.\n" + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajStavku;
    private javax.swing.JButton btnIDP;
    private javax.swing.JButton btnObrisiStavku;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox cbClanovi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClan;
    private javax.swing.JLabel lblDatumIzdavanja;
    private javax.swing.JLabel lblZaposleni;
    private javax.swing.JTable tblStavke;
    private javax.swing.JTextField txtDatumIzdavanja;
    private javax.swing.JFormattedTextField txtIDP;
    private javax.swing.JTextField txtRokZaVracanje;
    private javax.swing.JTextField txtZaposleni;
    // End of variables declaration//GEN-END:variables

    private void pripremiFormu() throws Exception {
        txtZaposleni.setText(ClientController.getInstance().getTrenutniKorisnik().toString());
        popuniComboBoxClanovi();
        setDatumIzdavanja();
        setRokZaVracanje();
        pripremiTabelu();
    }

    private void popuniComboBoxClanovi() {
        try {
            List<Clan> clanovi = ClientController.getInstance().vratiSveClanove();
            for (Clan clan : clanovi) {
                cbClanovi.addItem(clan);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setDatumIzdavanja() {
        Date datumIzdavanja = new Date();
        datumIzdavanja.getTime();
        txtDatumIzdavanja.setText(format.format(datumIzdavanja));
    }

    private void setRokZaVracanje() {
        Date d = new Date();
        d.getTime();
        Calendar c = Calendar.getInstance();
        c.setTime(d);
        switch (stavke.size()) {
            case 0:
                c.add(Calendar.DAY_OF_MONTH, 10);
                break;
            case 1:
                c.add(Calendar.DAY_OF_MONTH, 10);
                break;
            case 2:
                c.add(Calendar.DAY_OF_MONTH, 20);
                break;
            case 3:
                c.add(Calendar.DAY_OF_MONTH, 30);
                break;
        }
        d = c.getTime();
        txtRokZaVracanje.setText(format.format(d));
    }

    private void pripremiTabelu() throws Exception {
        List<StavkaPotvrde> s = new ArrayList<>();
        TableModelStavke tm = new TableModelStavke(s);
        tblStavke.setModel(tm);
        TableColumn tc = tblStavke.getColumnModel().getColumn(0);
        tc.setMaxWidth(25);
        popuniComboBoxKnjige();
    }

    public void validacija() throws Exception {
        String poruka = "";
        if (txtIDP.getText().isEmpty()) {
            poruka += "Potvrda mora da ima svoj IDP!\n";
        }
        if (stavke.isEmpty()) {
            poruka += "Potvrda mora da sadrzi barem jednu stavku!\n";
        }
        for (StavkaPotvrde stavkaPotvrde : stavke) {
            if (stavkaPotvrde.getKnjiga() == null) {
                poruka += "Svaka stavka mora da sadrzi odredjeni primerak knjige!\n";
            }
        }
        if (!poruka.equals("")) {
            throw new Exception(poruka);
        }
    }

    private void popuniComboBoxKnjige() {
        dostupneKnjige.clear();
        dostupneKnjige.addAll(dostupneKnjige2);
        for (int i = 0; i < dostupneKnjige.size(); i++) {
            if (!stavke.isEmpty()) {
                for (StavkaPotvrde stavkaPotvrde : stavke) {
                    if (stavkaPotvrde.getKnjiga() != null && stavkaPotvrde.getKnjiga().getNaziv().equals(dostupneKnjige.get(i).getNaziv())) {
                        dostupneKnjige.remove(i);
                        i--;
                        break;
                    }
                }
            }
        }
        JComboBox cbKnjige = new JComboBox(dostupneKnjige.toArray());
        TableColumn tc = tblStavke.getColumnModel().getColumn(1);
        tc.setCellEditor(new DefaultCellEditor(cbKnjige));
    }
}
